@page "/identity/account/login"
@using Client.Pages.OtherPages
@layout AuthenticationLayout

<div class="account-page">
    <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <div class="card-header">
            <i class="bi bi-shield-fill-exclamation"></i>
            <div class="">
                 <span class="title">AIR SHAPE</span>
                 <span class="title2">Přihlášení do aplikace</span>
            </div>
        </div>
        <div class="card-body">
            <label>
                <input @bind="User.Email"
                    class=""
                    type="email"
                    placeholder="Email Address"
                    aria-label="Email Address"
                    aria-describedby="Email Address"
                required >
                <i class="bi bi-key-fill"></i>
            </label>
            <label>
                    <input @bind="User.Password" 
                    class=""
                    placeholder="Password"
                    aria-label="Password"
                    aria-describedby="Password"
                    required >
                <i class="bi bi-envelope-at-fill md hydrated"></i>
            </label>
        </div>
        <div class="card-footer">
                 @if (ShowLoadinButton)
                {
                    <ButtonLoadingSpinner></ButtonLoadingSpinner>
                }
                else
                {
                    <button class="butn float-end" type="submit">LOGIN</button>
                }
        </div>
        <ValidationSummary />
    </EditForm>
</div>

@code {
    Login User = new();
    public bool ShowLoadinButton { get; set; } = false;
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleLogin()
    {
        ShowLoadinButton = true;
        var result = await accountService.SignAsync(User);
        if (result.Flag)
        {
            await DisplayDialog(result.Message, "Success");
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
                { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            await DisplayDialog(result.Message, "Allert");
        }
        ShowLoadinButton = false;
    }

    private async Task DisplayDialog(string content, string title)
    {
        // await DialogService.AlertAsync(content, title);
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
            NavManager.NavigateTo("/home/dashboard");
    }
}
